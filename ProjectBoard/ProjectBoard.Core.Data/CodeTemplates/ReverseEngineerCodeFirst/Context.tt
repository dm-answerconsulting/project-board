<#@ template hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude" #><#@
 output extension=".cs" #><#

    var efHost = (EfTextTemplateHost)Host;
    var code = new CodeGenerationTools(this);
#>
using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Collections.Generic;
using System.Linq;
using <#= code.EscapeNamespace(efHost.Namespace) #>;
using <#= code.EscapeNamespace(efHost.MappingNamespace) #>;

namespace <#= code.EscapeNamespace(efHost.Namespace).Replace("Models", "Context.Db") #>
{
    public partial class <#= efHost.EntityContainer.Name #> : DbContext
    {
        static <#= efHost.EntityContainer.Name #>()
        {
            Database.SetInitializer<<#= efHost.EntityContainer.Name #>>(null);
        }

        public <#= efHost.EntityContainer.Name #>()
            : base("Name=<#= efHost.EntityContainer.Name #>")
        {
        }

<#
    foreach (var set in efHost.EntityContainer.BaseEntitySets.OfType<EntitySet>())
    {	
		if(set.Name == "sysdiagrams")
		{
			continue;	
		}

		var typeName = set.ElementType.Name;
		if(typeName.EndsWith("STATU"))
		{
			typeName = typeName + "S";
		} 
		else if(typeName.EndsWith("statu") || typeName.EndsWith("Statu"))
		{
			typeName = typeName + "s";
		}
#>		
		public DbSet<<#= typeName #>> <#= set.Name #> { get; set; }
<#
    }
#>

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
<#
    foreach (var set in efHost.EntityContainer.BaseEntitySets.OfType<EntitySet>())
    {
		if(set.Name == "sysdiagrams")
		{
			continue;	
		}

		var typeName = set.ElementType.Name;
		if(typeName.EndsWith("STATU"))
		{
			typeName = typeName + "S";
		} 
		else if(typeName.EndsWith("statu") || typeName.EndsWith("Statu"))
		{
			typeName = typeName + "s";
		}
#>
            modelBuilder.Configurations.Add(new <#= typeName #>Map());
<#
	}
#>
        }
    }
}

namespace <#= code.EscapeNamespace(efHost.Namespace).Replace("Models", "Context") #>
{
	using <#= code.EscapeNamespace(efHost.Namespace).Replace("Models", "Context.Db") #>;
	using <#= code.EscapeNamespace(efHost.Namespace).Replace("Models", "Contracts") #>;

	public class Repository: IRepository
    {
		private readonly <#= efHost.EntityContainer.Name #> _db = new <#= efHost.EntityContainer.Name #>();

<#
    foreach (var set in efHost.EntityContainer.BaseEntitySets.OfType<EntitySet>())
    {
		var typeName = set.ElementType.Name;
		if(typeName.EndsWith("STATU"))
		{
			typeName = typeName + "S";
		} 
		else if(typeName.EndsWith("statu") || typeName.EndsWith("Statu"))
		{
			typeName = typeName + "s";
		}
		
		if(set.Name != "sysdiagrams")
		{		
#>
		public IQueryable<<#= typeName #>> <#= set.Name #> 
		{ 
			get
			{
				return _db.<#= set.Name #>.AsQueryable();
			} 
		}
<#
		}
    }
#>
		public virtual T Add<T>(T entity) where T : class, IEntity<T>
        {
            return _db.Set<T>().Add(entity);
        }

        public virtual IEnumerable<T> Add<T>(IEnumerable<T> entities) where T : class, IEntity<T>
        {
            var result = new List<T>();

            foreach (var entity in entities)
            {
                result.Add(Add(entity));
            }

            return result;
        }

        public virtual T Remove<T>(T entity) where T : class, IEntity<T>
        {
            return _db.Set<T>().Remove(entity);
        }

        public virtual IEnumerable<T> Remove<T>(IEnumerable<T> entities) where T : class, IEntity<T>
        {
            var result = new List<T>();

            foreach (var entity in entities)
            {
                result.Add(Remove(entity));
            }

            return result;
        }

		public virtual T FindByKey<T>(params object[] key) where T : class, IEntity<T>
        {
            return _db.Set<T>().Find(key);
        }

        public virtual IQueryable<T> Query<T>() where T : class, IEntity<T>
        {
            return _db.Set<T>().AsQueryable();
        }
        
		public virtual int SaveChanges()
		{
			return _db.SaveChanges();
		}

		public virtual void Dispose()
        {
            _db.Dispose();
        }
    }
}

namespace <#= code.EscapeNamespace(efHost.Namespace).Replace("Models", "Contracts") #>
{
	public interface IRepository: IDisposable
    {
<#
    foreach (var set in efHost.EntityContainer.BaseEntitySets.OfType<EntitySet>())
    {
		var typeName = set.ElementType.Name;
		if(typeName.EndsWith("STATU"))
		{
			typeName = typeName + "S";
		} 
		else if(typeName.EndsWith("statu") || typeName.EndsWith("Statu"))
		{
			typeName = typeName + "s";
		}
		
		if(set.Name != "sysdiagrams")
		{		
#>
		IQueryable<<#= typeName #>> <#= set.Name #> { get; }
<#
		}
    }
#>
		T Add<T>(T entity) where T : class, IEntity<T>;
		IEnumerable<T> Add<T>(IEnumerable<T> entities) where T : class, IEntity<T>;

		T Remove<T>(T entity) where T : class, IEntity<T>;
		IEnumerable<T> Remove<T>(IEnumerable<T> entities) where T : class, IEntity<T>;

		T FindByKey<T>(params object[] key) where T : class, IEntity<T>;

		IQueryable<T> Query<T>() where T : class, IEntity<T>;

		int SaveChanges();
    }

	public interface IEntity<in TEntity> where TEntity : class
    {        
        void Update(TEntity entity);
    }
}
