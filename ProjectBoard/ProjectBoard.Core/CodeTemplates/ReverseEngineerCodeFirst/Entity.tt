<#@ template hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude" #><#@
 output extension=".cs" #><#

    var efHost = (EfTextTemplateHost)Host;
    var code = new CodeGenerationTools(this);
	var tableName = (string)efHost.TableSet.MetadataProperties["Table"].Value ?? efHost.TableSet.Name;
	var nameSpaceAddition = tableName == "sysdiagrams" ? ".Unused" : "";	

#>
using System;
using System.Collections.Generic;
using System.Linq; 
using <#= code.EscapeNamespace(efHost.Namespace).Replace(".Models", ".Data.Contracts") #>;
<# 
       if (efHost.EntityFrameworkVersion >= new Version(4, 4)) 
        { 
#> 
using System.ComponentModel.DataAnnotations.Schema; 
<# 
        } 
        else 
        { 
#> 
using System.ComponentModel.DataAnnotations; 
<# 
        } 
#>

namespace <#= code.EscapeNamespace(efHost.Namespace) + nameSpaceAddition #>
{
	<#                 
        var schemaName = (string)efHost.TableSet.MetadataProperties["Schema"].Value; 
        schemaName = string.IsNullOrWhiteSpace(schemaName) 
                ? "dbo" 
                : schemaName;

        if(schemaName != "dbo") 
        { 
#> 
    [Table("<#= tableName #>", Schema="<#= schemaName #>")] 
<# 
        }
#> 
    public partial class <#= tableName #> :IEntity<<#= tableName #>>
    {
<#
    var collectionNavigations = efHost.EntityType.NavigationProperties.Where(
        np => np.DeclaringType == efHost.EntityType
            && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);

    // Add a ctor to initialize any collections
    if (collectionNavigations.Any())
    {
#>
        public <#= tableName #>()
        {
<#
        foreach (var navProperty in collectionNavigations)
        {
#>
            this.<#= code.Escape(navProperty) #> = new List<<#= code.Escape(navProperty.ToEndMember.GetEntityType()) #>>();
<#
        }
#>
        }
<#
    }
        
    foreach (var property in efHost.EntityType.Properties)
    {
        var typeUsage = code.Escape(property.TypeUsage);

        // Fix-up spatial types for EF6
        if (efHost.EntityFrameworkVersion >= new Version(6, 0)
            && typeUsage.StartsWith("System.Data.Spatial."))
        {
            typeUsage = typeUsage.Replace(
                "System.Data.Spatial.",
                "System.Data.Entity.Spatial.");
        }

		var columnName = efHost.PropertyToColumnMappings[property].Name; 
                if(code.Escape(property) != columnName) 
                { 
#> 
        [Column("<#= columnName #>")] 
<# 
                } 
#>
        <#= Accessibility.ForProperty(property) #> <#= typeUsage #> <#= code.Escape(property) #> { get; set; }
<#
    }

    foreach (var navProperty in efHost.EntityType.NavigationProperties.Where(np => np.DeclaringType == efHost.EntityType))
    {
		var typeName = code.Escape(navProperty.ToEndMember.GetEntityType());
		if(typeName.EndsWith("STATU"))
		{
			typeName = typeName + "S";
		} 
		else if(typeName.EndsWith("statu") || typeName.EndsWith("Statu"))
		{
			typeName = typeName + "s";
		}

        if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
        {
#>
        public virtual ICollection<<#= typeName #>> <#= code.Escape(navProperty) #> { get; set; }
<#
        }
        else
        {
#>
        public virtual <#= typeName #> <#= code.Escape(navProperty) #> { get; set; }
<#
        }
    }
#>

		public void Update(<#= tableName #> entity)
		{
<#
		foreach (var property in efHost.EntityType.Properties)
    {	
#>
			this.<#= code.Escape(property)#> = entity.<#= code.Escape(property)#>;
<#
    }
#>
		}
    }

	public static class <#= tableName #>GeneratedFilters 
    {
<#
		foreach (var property in efHost.EntityType.Properties)
    {
        var typeUsage = code.Escape(property.TypeUsage);

        // Fix-up spatial types for EF6
        if (efHost.EntityFrameworkVersion >= new Version(6, 0)
            && typeUsage.StartsWith("System.Data.Spatial."))
        {
            typeUsage = typeUsage.Replace(
                "System.Data.Spatial.",
                "System.Data.Entity.Spatial.");
        }

		var columnName = efHost.PropertyToColumnMappings[property].Name; 
                if(code.Escape(property) != columnName) 
                { 
#> 
        [Column("<#= columnName #>")] 
<# 
                } 
#>
		public static IQueryable<<#= tableName #>> For<#= code.Escape(property) #>(this IQueryable<<#= tableName #>> query, <#= typeUsage #> <#= code.Escape(property) #>)
        {
            return query.Where(o => o.<#= code.Escape(property) #> == <#= code.Escape(property) #>);
        }
<#
    }
#>
    }
}
